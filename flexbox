.container {
  display: flex;
  /*flex-direction: column;*/
  /*flex-direction: column-reverse;*/
  /*flex-direction: row-reverse;*/
  /*flex-direction: row;*/
  flex-wrap: wrap;
  /*flex-wrap: wrap-reverse;*/
  
  /*flex-flow: row wrap;*/
  /*flex-flow: column wrap;*/
  
  /*justify-content: flex-start;*/
  /*justify-content: flex-end;*/
  /*justify-content: center;*/
  /*justify-content: space-between;*/
  /*justify-content: space-around;*/
  /*justify-content: space-evenly;*/

  /*align-items: flex-start;*/
  /*align-items: flex-end;*/
  /*align-items: center;*/
  /*align-items: stretch;*/
  /*align-items: baseline;*/

  /*align-content: flex-start;*/
   align-content: flex-end;
   /*align-content: center;
   /*align-content: stretch;
   /*align-content: space-between;*/
   /*align-content: space-around;*/

  /*You can use align-content to set how multiple lines are spaced apart from each other. This property takes the following values:

flex-start: Lines are packed at the top of the container.
flex-end: Lines are packed at the bottom of the container.
center: Lines are packed at the vertical center of the container.
space-between: Lines display with equal spacing between them.
space-around: Lines display with equal spacing around them.
stretch: Lines are stretched to fit the container.
This can be confusing, but align-content determines the spacing between lines, while align-items determines how the items as a whole are aligned within the container. When there is only one line, align-content has no effect.*/

  /*gap: 10px;*/
  /*gap: 10px 20px; row-gap column gap */
  row-gap: 10px;
  /*column-gap: 20px;*/
}


/*Note that align-content: This property only takes effect on multi-line flexible containers, where flex-wrap is set to either wrap or wrap-reverse). A single-line flexible container (i.e. where flex-wrap is set to its default value, no-wrap) will not reflect align-content.*/

.item {
  order: 1;/* default is 0 */
  flex-grow: 1; /* default 0 */
  /*Negative numbers are valid.*/
}

.footer-item {
  order: 2;
  flex-grow: 0; /* default 0 */
  /*Negative numbers are invalid.*/
}
/*By default, flex items are laid out in the source order. However, the order property controls the order in which they appear in the flex container. Items with the same order revert to source order.Items with the same order revert to source order.*/

/*Another property you can apply to individual items is align-self. This property accepts the same values as align-items and its value for the specific item.*/

.item {
  align-self: auto | flex-start | flex-end | center | baseline | stretch;
}
